specify Sphec\Mocks\Double
  describe __sphec_is_legal_function
    before
      @double = new Sphec\Mocks\Double;

    it always returns false when no legal functions have been added
      expect(@double->__sphec_is_legal_function('foo'))->to_be(false);
      expect(@double->__sphec_is_legal_function('blah'))->to_be(false);

    it returns true for a function that has been added
      @double->__sphec_add_legal_function('foo');
      expect(@double->__sphec_is_legal_function('foo'))->to_be(true);

    it throws an exception if you call a method that isn't legal
      $double = @double;
      $block = function() use ($double) { $double->foo(); };
      expect($block)->to_throw('Sphec\Mocks\UnstubbedMethodException');

  describe __sphec_add_legal_function
    before
      @double = new Sphec\Mocks\Double;

    it does not throw an exception if you call a method that was added first
      @double->__sphec_add_legal_function('foo');
      expect({ @double->foo(); })->not_to_throw('Sphec\Mocks\UnstubbedMethodException');

    it returns the value associated with an added function when called
      @double->__sphec_add_legal_function('foo', 42);
      expect(@double->foo())->to_be(42);

    it returns null when a legal function is called without specified params
      @double->__sphec_add_legal_function('foo', ['barf'], 42);
      expect(@double->foo())->to_be(null);

    it returns the value associated with an added function when called with specified params
      @double->__sphec_add_legal_function('foo', ['barf'], 42);
      expect(@double->foo('barf'))->to_be(42);

    it returns the answer associated with no params when both any params and specific params are specified
      @double->__sphec_add_legal_function('foo', 3);
      @double->__sphec_add_legal_function('foo', ['barf'], 42);
      expect(@double->foo())->to_be(3);

    it works with a test double as a parameter
      $other_double = new Sphec\Mocks\Double('other');
      @double->__sphec_add_legal_function('foo', ['barf', $other_double], 42);
      expect(@double->foo('barf', $other_double))->to_be(42);

    it returns a null value associated with an added function when called
      @double->__sphec_add_legal_function('foo', null);
      expect(@double->foo())->to_be(null);

    it returns a null value associated with an added function when called with specified params
      @double->__sphec_add_legal_function('foo', ['barf'], null);
      expect(@double->foo('barf'))->to_be(null);

  describe __sphec_name
    it is <Anonymous> when nothing is passed to the constructor
      $double = new Sphec\Mocks\Double;
      expect($double->__sphec_name())->to_be('<Anonymous>');

    it returns the first param to the constructor when it is a string
      $double = new Sphec\Mocks\Double('blech');
      expect($double->__sphec_name())->to_be('blech');

    it is <Anonymous> when an array is the first arg to the constructor
      $double = new Sphec\Mocks\Double(['blech' => 'foo']);
      expect($double->__sphec_name())->to_be('<Anonymous>');

    it returns the first param to the constructor when it is a string and the second is supplied
      $double = new Sphec\Mocks\Double('blech', ['horf' => 'foo']);
      expect($double->__sphec_name())->to_be('blech');

  describe __toString
    it is <Anonymous> when nothing is passed to the constructor
      $double = new Sphec\Mocks\Double;
      expect("$double")->to_be('test_double(<Anonymous>)');

    it returns the first param to the constructor when it is a string
      $double = new Sphec\Mocks\Double('blech');
      expect("$double")->to_be('test_double(blech)');

    it is <Anonymous> when an array is the first arg to the constructor
      $double = new Sphec\Mocks\Double(['blech' => 'foo']);
      expect("$double")->to_be('test_double(<Anonymous>)');

    it returns the first param to the constructor when it is a string and the second is supplied
      $double = new Sphec\Mocks\Double('blech', ['horf' => 'foo']);
      expect("$double")->to_be('test_double(blech)');

  describe __construct
    it converts the first param to recognized methods when it's a hash
      $double = new Sphec\Mocks\Double(['blech' => 'foo', 'ultimate_question' => 42]);
      expect($double->blech())->to_be('foo');
      expect($double->ultimate_question())->to_be(42);

    it converts the second param to recognized methods when the first is a string
      $double = new Sphec\Mocks\Double('me', ['blech' => 'foo', 'ultimate_question' => 42]);
      expect($double->blech())->to_be('foo');
      expect($double->ultimate_question())->to_be(42);

  describe __sphec_function_call_count
    before
      @double = new Sphec\Mocks\Double(['blech' => 'foo']);

    it starts out at zero
      expect(@double->__sphec_function_call_count('blech'))->to_be(0);

    it increments for each time the method is called
      @double->blech();
      expect(@double->__sphec_function_call_count('blech'))->to_be(1);
      @double->blech();
      expect(@double->__sphec_function_call_count('blech'))->to_be(2);

    it counts both the generic call and the call with params
      @double->__sphec_add_legal_function('foo', ['barf'], 42);
      expect(@double->__sphec_function_call_count('foo'))->to_be(0);
      expect(@double->__sphec_function_call_count('foo', ['barf']))->to_be(0);
      @double->foo('barf');
      expect(@double->__sphec_function_call_count('foo'))->to_be(1);
      expect(@double->__sphec_function_call_count('foo', ['barf']))->to_be(1);
      @double->foo();
      expect(@double->__sphec_function_call_count('foo'))->to_be(2);
      expect(@double->__sphec_function_call_count('foo', ['barf']))->to_be(1);

    it counts calls with params even if not explicitly added
      expect(@double->__sphec_function_call_count('blech', ['horf']))->to_be(0);
      @double->blech('horf');
      expect(@double->__sphec_function_call_count('blech', ['horf']))->to_be(1);

  describe __call
    let @double = new Sphec\Mocks\Double(['blech' => 'foo']);

    it returns the expected return value when passed no arguments
      expect(@double->blech())->to_be('foo');

    it returns the generic return value when passed unexpected arguments
      @double->__sphec_add_legal_function('blech', ['barf'], 42);
      expect(@double->blech('horf'))->to_be('foo');

    it returns the more specific return value when passed expected arguments
      @double->__sphec_add_legal_function('blech', ['barf'], 42);
      expect(@double->blech('barf'))->to_be(42);

  describe test_double
    it returns a Double object
      $double = test_double();
      expect($double instanceof \Sphec\Mocks\Double)->to_be(true);

    it has an anonymous sphec name when passed no arguments
      $double = test_double();
      expect($double->__sphec_name())->to_be('<Anonymous>');

    it the first argument as the sphec name when it's a string
      $double = test_double('my double');
      expect($double->__sphec_name())->to_be('my double');

    it converts the first param to recognized methods when it's a hash
      $double = test_double(['blech' => 'foo', 'ultimate_question' => 42]);
      expect($double->blech())->to_be('foo');
      expect($double->ultimate_question())->to_be(42);

    it converts the second param to recognized methods when the first is a string
      $double = test_double('me', ['blech' => 'foo', 'ultimate_question' => 42]);
      expect($double->blech())->to_be('foo');
      expect($double->ultimate_question())->to_be(42);
